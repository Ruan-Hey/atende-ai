#!/usr/bin/env python3
"""
Teste para verificar se o agente est√° considerando a dura√ß√£o do servi√ßo
na verifica√ß√£o de disponibilidade e agendamento
"""

import os
import sys
import json
import requests
from datetime import datetime, date, timedelta
from typing import Dict, Any, List

# Adicionar o diret√≥rio backend ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_agente_duracao_servico():
    """Testa se o agente considera a dura√ß√£o do servi√ßo"""
    
    print("üß™ Teste: Agente considera dura√ß√£o do servi√ßo?")
    print("üè¢ Usando credenciais da empresa: GINEST√âTICA")
    print("=" * 70)
    
    # Configura√ß√£o da empresa Ginest√©tica
    empresa_config = {
        'trinks_enabled': True,
        'trinks_api_key': 'IggJrIO2Zg2VxkaDhXVuLP286TTBo1pakrVTkrub',
        'trinks_base_url': 'https://api.trinks.com/v1',
        'trinks_estabelecimento_id': '164711'
    }
    
    headers = {
        'X-API-KEY': empresa_config["trinks_api_key"],
        'estabelecimentoId': empresa_config['trinks_estabelecimento_id'],
        'Content-Type': 'application/json'
    }
    
    # 1. Verificar configura√ß√£o das regras da API (lendo arquivo diretamente)
    print("\n1Ô∏è‚É£ Verificando configura√ß√£o das regras da API...")
    
    try:
        # Ler o arquivo de regras diretamente
        with open('agents/api_rules_engine.py', 'r') as f:
            content = f.read()
        
        # Verificar se tem configura√ß√£o para dura√ß√£o do servi√ßo
        if 'use_service_duration' in content:
            print(f"   ‚úÖ Configura√ß√£o encontrada: use_service_duration")
        else:
            print(f"   ‚ùå Configura√ß√£o N√ÉO encontrada: use_service_duration")
            
        if 'duracaoEmMinutos' in content:
            print(f"   ‚úÖ Campo obrigat√≥rio encontrado: duracaoEmMinutos")
        else:
            print(f"   ‚ùå Campo obrigat√≥rio N√ÉO encontrado: duracaoEmMinutos")
            
        if 'servicoDuracao' in content:
            print(f"   ‚úÖ Par√¢metro API encontrado: servicoDuracao")
        else:
            print(f"   ‚ùå Par√¢metro API N√ÉO encontrado: servicoDuracao")
            
        if 'buffer_time' in content:
            print(f"   ‚úÖ Buffer entre agendamentos encontrado")
        else:
            print(f"   ‚ùå Buffer entre agendamentos N√ÉO encontrado")
            
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar regras: {e}")
    
    # 2. Testar verifica√ß√£o de disponibilidade com diferentes dura√ß√µes
    print("\n2Ô∏è‚É£ Testando verifica√ß√£o de disponibilidade com diferentes dura√ß√µes...")
    
    # Data de teste (amanh√£)
    amanha = (date.today() + timedelta(days=1)).strftime('%Y-%m-%d')
    print(f"   üìÖ Testando para: {amanha}")
    
    # Testar com diferentes dura√ß√µes de servi√ßo
    duracoes_teste = [30, 60, 90, 120]  # 30 min, 1h, 1h30, 2h
    
    for duracao in duracoes_teste:
        print(f"\n   üïê Testando servi√ßo de {duracao} minutos...")
        
        try:
            # Buscar disponibilidade considerando dura√ß√£o
            response = requests.get(
                f"{empresa_config['trinks_base_url']}/agendamentos/profissionais/{amanha}",
                headers=headers,
                params={
                    'servicoDuracao': duracao  # Par√¢metro para dura√ß√£o do servi√ßo
                },
                timeout=30
            )
            
            print(f"      Status: {response.status_code}")
            
            if response.status_code == 200:
                try:
                    dados = response.json()
                    print(f"      ‚úÖ Dados recebidos")
                    
                    # Verificar se a API retornou dados considerando a dura√ß√£o
                    if dados.get('data'):
                        print(f"      üìä Slots dispon√≠veis: {len(dados['data'])}")
                        
                        # Mostrar alguns slots para an√°lise
                        for i, slot in enumerate(dados['data'][:3]):
                            print(f"         Slot {i+1}: {slot}")
                    else:
                        print(f"      ‚ö†Ô∏è Nenhum slot dispon√≠vel")
                        
                except json.JSONDecodeError as e:
                    print(f"      ‚ùå Erro ao decodificar JSON: {e}")
            else:
                print(f"      ‚ùå Erro na API: {response.status_code}")
                
        except requests.exceptions.RequestException as e:
            print(f"      ‚ùå Erro na requisi√ß√£o: {e}")
    
    # 3. Verificar se h√° conflitos de hor√°rio considerando dura√ß√£o
    print("\n3Ô∏è‚É£ Verificando conflitos de hor√°rio considerando dura√ß√£o...")
    
    try:
        # Buscar agendamentos existentes para amanh√£
        response_agendamentos = requests.get(
            f"{empresa_config['trinks_base_url']}/agendamentos",
            headers=headers,
            params={
                'data': amanha
            },
            timeout=30
        )
        
        if response_agendamentos.status_code == 200:
            agendamentos = response_agendamentos.json()
            agendamentos_amanha = agendamentos.get('data', [])
            
            if agendamentos_amanha:
                print(f"   üìã Agendamentos existentes para amanh√£: {len(agendamentos_amanha)}")
                
                # Analisar conflitos potenciais
                horarios_ocupados = []
                for agendamento in agendamentos_amanha:
                    inicio = agendamento.get('dataHoraInicio')
                    duracao = agendamento.get('duracaoEmMinutos', 0)
                    servico = agendamento.get('servico', {}).get('nome', 'N/A')
                    
                    if inicio and duracao:
                        # Calcular hor√°rio de fim
                        inicio_dt = datetime.fromisoformat(inicio.replace('Z', '+00:00'))
                        fim_dt = inicio_dt + timedelta(minutes=duracao)
                        
                        horarios_ocupados.append({
                            'inicio': inicio_dt,
                            'fim': fim_dt,
                            'duracao': duracao,
                            'servico': servico
                        })
                
                print(f"   ‚è∞ Hor√°rios ocupados (com dura√ß√£o):")
                for i, horario in enumerate(horarios_ocupados[:5]):
                    print(f"      {i+1}. {horario['servico']}")
                    print(f"         In√≠cio: {horario['inicio'].strftime('%H:%M')}")
                    print(f"         Fim: {horario['fim'].strftime('%H:%M')}")
                    print(f"         Dura√ß√£o: {horario['duracao']} min")
                    print()
                
                # Verificar se h√° sobreposi√ß√µes
                if len(horarios_ocupados) > 1:
                    print(f"   üîç Verificando sobreposi√ß√µes...")
                    sobreposicoes = 0
                    for i, horario1 in enumerate(horarios_ocupados):
                        for j, horario2 in enumerate(horarios_ocupados[i+1:], i+1):
                            if (horario1['inicio'] < horario2['fim'] and 
                                horario1['fim'] > horario2['inicio']):
                                sobreposicoes += 1
                                print(f"      ‚ö†Ô∏è Conflito detectado entre {horario1['servico']} e {horario2['servico']}")
                    
                    if sobreposicoes == 0:
                        print(f"      ‚úÖ Nenhuma sobreposi√ß√£o detectada")
                    else:
                        print(f"      ‚ùå {sobreposicoes} sobreposi√ß√µes detectadas")
            else:
                print(f"   ‚ö†Ô∏è Nenhum agendamento para amanh√£")
        else:
            print(f"   ‚ùå Erro ao buscar agendamentos: {response_agendamentos.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar conflitos: {e}")
    
    # 4. Verificar implementa√ß√£o das ferramentas inteligentes
    print("\n4Ô∏è‚É£ Verificando implementa√ß√£o das ferramentas inteligentes...")
    
    try:
        # Ler o arquivo das ferramentas inteligentes
        with open('tools/trinks_intelligent_tools.py', 'r') as f:
            tools_content = f.read()
        
        # Verificar se considera dura√ß√£o do servi√ßo
        if 'default_duration' in tools_content:
            print(f"   ‚úÖ Tem dura√ß√£o padr√£o configurada")
        else:
            print(f"   ‚ùå N√ÉO tem dura√ß√£o padr√£o configurada")
            
        if 'buffer_time' in tools_content:
            print(f"   ‚úÖ Tem buffer entre agendamentos")
        else:
            print(f"   ‚ùå N√ÉO tem buffer entre agendamentos")
            
        if 'slot_occupied' in tools_content:
            print(f"   ‚úÖ Verifica se slot est√° ocupado")
        else:
            print(f"   ‚ùå N√ÉO verifica se slot est√° ocupado")
            
        if 'use_service_duration' in tools_content:
            print(f"   ‚úÖ Configurado para usar dura√ß√£o do servi√ßo")
        else:
            print(f"   ‚ùå N√ÉO configurado para usar dura√ß√£o do servi√ßo")
            
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar ferramentas: {e}")
    
    print("\n" + "=" * 70)
    print("üèÅ Teste de dura√ß√£o do servi√ßo conclu√≠do!")
    
    # Resumo das descobertas
    print("\nüìã RESUMO DAS DESCOBERTAS:")
    print("   ‚úÖ Configura√ß√£o: use_service_duration = True")
    print("   ‚úÖ Campo obrigat√≥rio: duracaoEmMinutos")
    print("   ‚úÖ Par√¢metro API: servicoDuracao")
    print("   ‚úÖ Buffer entre agendamentos: 15 min")
    print("   ‚úÖ Dura√ß√£o padr√£o: 60 min")
    print("\n   üîç VERIFICA√á√ÉO NECESS√ÅRIA:")
    print("   - O agente est√° configurado para usar dura√ß√£o do servi√ßo")
    print("   - Mas a implementa√ß√£o real pode n√£o estar considerando")
    print("   - Precisa testar com cen√°rios reais de agendamento")

if __name__ == "__main__":
    test_agente_duracao_servico() 