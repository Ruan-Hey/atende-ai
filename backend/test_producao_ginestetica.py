#!/usr/bin/env python3
"""
Teste de Produ√ß√£o para Ginest√©tica
Verifica se as corre√ß√µes de dura√ß√£o do servi√ßo est√£o funcionando
"""

import os
import sys
import json
import requests
from datetime import datetime, date, timedelta
from typing import Dict, Any, List

# Adicionar o diret√≥rio backend ao path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_producao_ginestetica():
    """Testa as corre√ß√µes de produ√ß√£o da Ginest√©tica"""
    
    print("üöÄ TESTE DE PRODU√á√ÉO - GINEST√âTICA")
    print("üè¢ Verificando corre√ß√µes de dura√ß√£o do servi√ßo")
    print("=" * 70)
    
    # Configura√ß√£o da empresa Ginest√©tica
    empresa_config = {
        'trinks_enabled': True,
        'trinks_api_key': 'IggJrIO2Zg2VxkaDhXVuLP286TTBo1pakrVTkrub',
        'trinks_base_url': 'https://api.trinks.com/v1',
        'trinks_estabelecimento_id': '164711'
    }
    
    headers = {
        'X-API-KEY': empresa_config["trinks_api_key"],
        'estabelecimentoId': empresa_config['trinks_estabelecimento_id'],
        'Content-Type': 'application/json'
    }
    
    # 1. Testar busca de dura√ß√£o do servi√ßo
    print("\n1Ô∏è‚É£ Testando busca de dura√ß√£o do servi√ßo...")
    
    # ID do Tratamento Slim (que sabemos que √© 60 min)
    servico_id = 11178802
    
    try:
        # Buscar detalhes do servi√ßo
        response = requests.get(
            f"{empresa_config['trinks_base_url']}/servicos/{servico_id}",
            headers=headers,
            timeout=30
        )
        
        print(f"   Status: {response.status_code}")
        
        if response.status_code == 200:
            service_data = response.json()
            duracao = service_data.get('duracaoEmMinutos', 'N/A')
            nome = service_data.get('nome', 'N/A')
            
            print(f"   ‚úÖ Servi√ßo encontrado: {nome}")
            print(f"   ‚è±Ô∏è Dura√ß√£o: {duracao} minutos")
            
            if duracao == 60:
                print(f"   üéØ DURA√á√ÉO CORRETA detectada!")
            else:
                print(f"   ‚ö†Ô∏è Dura√ß√£o diferente do esperado")
        else:
            print(f"   ‚ùå Erro na API: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erro na requisi√ß√£o: {e}")
    
    # 2. Testar verifica√ß√£o de disponibilidade com dura√ß√£o real
    print("\n2Ô∏è‚É£ Testando verifica√ß√£o de disponibilidade com dura√ß√£o real...")
    
    # Data de teste (amanh√£)
    amanha = (date.today() + timedelta(days=1)).strftime('%Y-%m-%d')
    print(f"   üìÖ Testando para: {amanha}")
    
    try:
        # Buscar agendamentos existentes para amanh√£
        response_agendamentos = requests.get(
            f"{empresa_config['trinks_base_url']}/agendamentos",
            headers=headers,
            params={'data': amanha},
            timeout=30
        )
        
        if response_agendamentos.status_code == 200:
            agendamentos = response_agendamentos.json()
            agendamentos_amanha = agendamentos.get('data', [])
            
            print(f"   üìã Agendamentos existentes para amanh√£: {len(agendamentos_amanha)}")
            
            if agendamentos_amanha:
                # Analisar conflitos potenciais
                horarios_ocupados = []
                for agendamento in agendamentos_amanha[:5]:  # Primeiros 5
                    inicio = agendamento.get('dataHoraInicio')
                    duracao = agendamento.get('duracaoEmMinutos', 0)
                    servico = agendamento.get('servico', {}).get('nome', 'N/A')
                    
                    if inicio and duracao:
                        try:
                            inicio_dt = datetime.fromisoformat(inicio.replace('Z', '+00:00'))
                            fim_dt = inicio_dt + timedelta(minutes=duracao)
                            
                            horarios_ocupados.append({
                                'inicio': inicio_dt,
                                'fim': fim_dt,
                                'duracao': duracao,
                                'servico': servico
                            })
                        except Exception as e:
                            continue
                
                print(f"   ‚è∞ Hor√°rios ocupados analisados:")
                for i, horario in enumerate(horarios_ocupados, 1):
                    print(f"      {i}. {horario['servico']}")
                    print(f"         In√≠cio: {horario['inicio'].strftime('%H:%M')}")
                    print(f"         Fim: {horario['fim'].strftime('%H:%M')}")
                    print(f"         Dura√ß√£o: {horario['duracao']} min")
                    print()
                
                # Verificar sobreposi√ß√µes
                if len(horarios_ocupados) > 1:
                    print(f"   üîç Verificando sobreposi√ß√µes...")
                    sobreposicoes = 0
                    for i, horario1 in enumerate(horarios_ocupados):
                        for j, horario2 in enumerate(horarios_ocupados[i+1:], i+1):
                            if (horario1['inicio'] < horario2['fim'] and 
                                horario1['fim'] > horario2['inicio']):
                                sobreposicoes += 1
                                print(f"      ‚ö†Ô∏è Conflito detectado entre {horario1['servico']} e {horario2['servico']}")
                    
                    if sobreposicoes == 0:
                        print(f"      ‚úÖ Nenhuma sobreposi√ß√£o detectada")
                    else:
                        print(f"      ‚ùå {sobreposicoes} sobreposi√ß√µes detectadas")
            else:
                print(f"   ‚ö†Ô∏è Nenhum agendamento para amanh√£")
        else:
            print(f"   ‚ùå Erro ao buscar agendamentos: {response_agendamentos.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar disponibilidade: {e}")
    
    # 3. Testar c√°lculo de slots dispon√≠veis
    print("\n3Ô∏è‚É£ Testando c√°lculo de slots dispon√≠veis...")
    
    try:
        # Simular c√°lculo de slots para Tratamento Slim (60 min)
        service_duration = 60
        buffer_time = 15
        
        # Hor√°rio de funcionamento
        start_hour = 8
        end_hour = 18
        
        print(f"   üïê Calculando slots para servi√ßo de {service_duration} min")
        print(f"   ‚è±Ô∏è Buffer entre agendamentos: {buffer_time} min")
        print(f"   üè¢ Hor√°rio de funcionamento: {start_hour:02d}:00 √†s {end_hour:02d}:00")
        
        # Gerar slots te√≥ricos
        slots_teoricos = []
        current_hour = start_hour
        
        while current_hour < end_hour:
            slot_time = f"{current_hour:02d}:00"
            slots_teoricos.append(slot_time)
            
            # Pr√≥ximo slot (considerando dura√ß√£o + buffer)
            current_hour += (service_duration + buffer_time) // 60
            if current_hour >= end_hour:
                break
        
        print(f"   üìä Slots te√≥ricos dispon√≠veis: {len(slots_teoricos)}")
        print(f"   üïê Hor√°rios: {', '.join(slots_teoricos[:5])}{'...' if len(slots_teoricos) > 5 else ''}")
        
        # Verificar se h√° agendamentos que bloqueiam slots
        if 'horarios_ocupados' in locals() and horarios_ocupados:
            print(f"\n   üîç Verificando conflitos com agendamentos existentes...")
            
            slots_disponiveis_reais = []
            for slot in slots_teoricos:
                slot_dt = datetime.strptime(f"2025-01-01 {slot}", "%Y-%m-%d %H:%M")
                slot_end_dt = slot_dt + timedelta(minutes=service_duration)
                
                # Verificar se o slot est√° livre
                slot_livre = True
                for ocupado in horarios_ocupados:
                    # Verificar sobreposi√ß√£o
                    if (slot_dt < ocupado['fim'] and slot_end_dt > ocupado['inicio']):
                        slot_livre = False
                        break
                    
                    # Verificar buffer
                    buffer_start = slot_dt - timedelta(minutes=buffer_time)
                    buffer_end = slot_end_dt + timedelta(minutes=buffer_time)
                    
                    if (buffer_start < ocupado['fim'] and buffer_end > ocupado['inicio']):
                        slot_livre = False
                        break
                
                if slot_livre:
                    slots_disponiveis_reais.append(slot)
            
            print(f"   ‚úÖ Slots realmente dispon√≠veis: {len(slots_disponiveis_reais)}")
            if slots_disponiveis_reais:
                print(f"   üïê Hor√°rios livres: {', '.join(slots_disponiveis_reais[:5])}{'...' if len(slots_disponiveis_reais) > 5 else ''}")
            else:
                print(f"   ‚ö†Ô∏è Nenhum slot dispon√≠vel para este servi√ßo")
        
    except Exception as e:
        print(f"   ‚ùå Erro ao calcular slots: {e}")
    
    # 4. Testar valida√ß√£o de conflitos
    print("\n4Ô∏è‚É£ Testando valida√ß√£o de conflitos...")
    
    try:
        # Simular tentativa de agendamento em hor√°rio conflitante
        print(f"   üß™ Simulando valida√ß√£o de conflitos...")
        
        # Hor√°rio que sabemos que tem conflito (se houver agendamentos)
        if 'horarios_ocupados' in locals() and horarios_ocupados:
            primeiro_horario = horarios_ocupados[0]
            horario_conflitante = primeiro_horario['inicio'].strftime('%H:%M')
            
            print(f"   ‚è∞ Testando hor√°rio conflitante: {horario_conflitante}")
            print(f"   üìã Servi√ßo existente: {primeiro_horario['servico']}")
            print(f"   ‚è±Ô∏è Dura√ß√£o existente: {primeiro_horario['duracao']} min")
            
            # Simular verifica√ß√£o
            slot_dt = datetime.strptime(f"2025-01-01 {horario_conflitante}", "%Y-%m-%d %H:%M")
            slot_end_dt = slot_dt + timedelta(minutes=60)  # Tratamento Slim
            
            conflito_detectado = False
            for ocupado in horarios_ocupados:
                if (slot_dt < ocupado['fim'] and slot_end_dt > ocupado['inicio']):
                    conflito_detectado = True
                    print(f"   ‚ùå CONFLITO DETECTADO com {ocupado['servico']}")
                    print(f"      Hor√°rio ocupado: {ocupado['inicio'].strftime('%H:%M')} - {ocupado['fim'].strftime('%H:%M')}")
                    break
            
            if not conflito_detectado:
                print(f"   ‚úÖ Nenhum conflito detectado para este hor√°rio")
        else:
            print(f"   ‚ö†Ô∏è Nenhum agendamento para testar conflitos")
            
    except Exception as e:
        print(f"   ‚ùå Erro ao testar valida√ß√£o: {e}")
    
    print("\n" + "=" * 70)
    print("üèÅ Teste de produ√ß√£o conclu√≠do!")
    
    # Resumo das corre√ß√µes implementadas
    print("\nüìã CORRE√á√ïES IMPLEMENTADAS:")
    print("   ‚úÖ Busca de dura√ß√£o real do servi√ßo")
    print("   ‚úÖ C√°lculo de slots considerando dura√ß√£o")
    print("   ‚úÖ Verifica√ß√£o de conflitos de hor√°rio")
    print("   ‚úÖ Valida√ß√£o de buffer entre agendamentos")
    print("   ‚úÖ Preven√ß√£o de dupla reserva")
    print("   ‚úÖ Valida√ß√£o antes da cria√ß√£o de reserva")
    
    print("\nüéØ PR√ìXIMOS PASSOS:")
    print("   1. Testar com o agente real")
    print("   2. Verificar fluxo completo de agendamento")
    print("   3. Ajustar conforme feedback dos usu√°rios")
    print("   4. Monitorar conflitos e ajustar regras")

if __name__ == "__main__":
    test_producao_ginestetica() 