#!/usr/bin/env python3
"""
Script para atualizar o conhecimento da empresa TinyTeams
"""
import logging
import sys
import os
import json

# Adicionar o diret√≥rio atual ao path para imports
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import Empresa, Base

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def get_database_session():
    """Cria uma sess√£o do banco de dados"""
    try:
        # Usar configura√ß√£o de produ√ß√£o do Render
        database_url = "postgresql://atendeai:2pjZBzhDlZY275Z4FubsnBFPsjvLHNRw@dpg-d24vpfngi27c73bh06n0-a.oregon-postgres.render.com/atendeai"
        engine = create_engine(database_url)
        Base.metadata.create_all(engine)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        return SessionLocal()
    except Exception as e:
        logger.error(f"‚ùå Erro ao conectar ao banco: {e}")
        return None

def update_tinyteams_knowledge():
    """Atualiza o conhecimento da TinyTeams com informa√ß√µes mais completas"""
    session = get_database_session()
    if not session:
        return False
    
    try:
        # Buscar TinyTeams
        tinyteams = session.query(Empresa).filter(Empresa.slug == 'tinyteams').first()
        if not tinyteams:
            logger.error("‚ùå TinyTeams n√£o encontrada")
            return False
        
        logger.info(f"‚úÖ TinyTeams encontrada: ID={tinyteams.id}")
        logger.info(f"üìñ Nome atual: {tinyteams.nome}")
        
        # Conhecimento atualizado e mais completo
        updated_knowledge = {
            "items": [
                {
                    "title": "Hor√°rio de Funcionamento",
                    "key": "horario",
                    "description": "A TinyTeams funciona de segunda a sexta, das 8h √†s 18h, e aos s√°bados das 9h √†s 13h. Em feriados n√£o funcionamos.",
                    "aliases": ["funcionamento", "hor√°rios", "expediente", "quando funcionam", "dias √∫teis"],
                    "active": True
                },
                {
                    "title": "Servi√ßos Oferecidos",
                    "key": "servicos",
                    "description": "Oferecemos desenvolvimento de software personalizado, consultoria em TI, suporte t√©cnico especializado, treinamentos em equipe e integra√ß√£o de sistemas. Trabalhamos com as principais tecnologias do mercado.",
                    "aliases": ["o que fazemos", "produtos", "solu√ß√µes", "tecnologias", "desenvolvimento", "consultoria"],
                    "active": True
                },
                {
                    "title": "Pol√≠tica de Cancelamento",
                    "key": "cancelamento",
                    "description": "Cancelamentos podem ser feitos at√© 24h antes do agendamento sem custos adicionais. Cancelamentos com menos de 24h de anteced√™ncia podem ter taxa de 50% do valor do servi√ßo.",
                    "aliases": ["cancelar", "desmarcar", "pol√≠tica", "taxa cancelamento", "anteced√™ncia"],
                    "active": True
                },
                {
                    "title": "Formas de Pagamento",
                    "key": "pagamento",
                    "description": "Aceitamos PIX, cart√£o de cr√©dito/d√©bito (at√© 12x), boleto banc√°rio e transfer√™ncia banc√°ria. Para projetos maiores, oferecemos parcelamento personalizado.",
                    "aliases": ["pagar", "meios de pagamento", "cart√£o", "pix", "boleto", "parcelamento", "transfer√™ncia"],
                    "active": True
                },
                {
                    "title": "Tecnologias Utilizadas",
                    "key": "tecnologias",
                    "description": "Trabalhamos com React, Node.js, Python, Java, .NET, AWS, Azure, Docker, Kubernetes, e muitas outras tecnologias modernas. Sempre escolhemos a melhor stack para cada projeto.",
                    "aliases": ["tech stack", "linguagens", "frameworks", "cloud", "ferramentas", "stack tecnol√≥gico"],
                    "active": True
                },
                {
                    "title": "Processo de Desenvolvimento",
                    "key": "processo",
                    "description": "Seguimos metodologia √°gil com sprints de 2 semanas, reuni√µes di√°rias, e entregas incrementais. Mantemos comunica√ß√£o constante com o cliente durante todo o processo.",
                    "aliases": ["metodologia", "√°gil", "sprints", "entregas", "comunica√ß√£o", "desenvolvimento √°gil"],
                    "active": True
                },
                {
                    "title": "Suporte T√©cnico",
                    "key": "suporte",
                    "description": "Oferecemos suporte t√©cnico 24/7 para clientes premium, e suporte em hor√°rio comercial para demais clientes. Temos SLA de resposta de at√© 2 horas para casos cr√≠ticos.",
                    "aliases": ["suporte 24h", "SLA", "resposta", "cr√≠tico", "premium", "hor√°rio comercial"],
                    "active": True
                },
                {
                    "title": "Pre√ßos e Or√ßamentos",
                    "key": "precos",
                    "description": "Nossos pre√ßos variam conforme a complexidade do projeto e tecnologias utilizadas. Oferecemos or√ßamento gratuito e sem compromisso. Entre em contato para uma avalia√ß√£o personalizada.",
                    "aliases": ["or√ßamento", "pre√ßo", "custo", "avalia√ß√£o", "gratuito", "sem compromisso"],
                    "active": True
                }
            ]
        }
        
        # Atualizar conhecimento
        tinyteams.knowledge_json = updated_knowledge
        session.commit()
        
        logger.info("‚úÖ Conhecimento da TinyTeams atualizado com sucesso!")
        logger.info(f"üìö {len(updated_knowledge['items'])} itens de conhecimento")
        
        # Mostrar resumo
        for item in updated_knowledge['items']:
            logger.info(f"   üìù {item['title']} (key: {item['key']})")
            if item.get('aliases'):
                logger.info(f"      üè∑Ô∏è  Aliases: {', '.join(item['aliases'])}")
        
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erro ao atualizar conhecimento: {e}")
        session.rollback()
        import traceback
        traceback.print_exc()
        return False
    finally:
        session.close()

def main():
    """Fun√ß√£o principal"""
    logger.info("üöÄ Atualizando conhecimento da TinyTeams...")
    
    if update_tinyteams_knowledge():
        logger.info("üéâ Conhecimento atualizado com sucesso!")
    else:
        logger.error("‚ùå Falha ao atualizar conhecimento")

if __name__ == "__main__":
    main() 