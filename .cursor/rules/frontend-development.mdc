# Frontend Development Guidelines

## ‚öõÔ∏è React Development

### **Estrutura de Componentes**
- **Componentes funcionais:** Hooks modernos (useState, useEffect, useContext)
- **Props drilling:** Comunica√ß√£o entre componentes
- **Context API:** Estado global quando necess√°rio
- **Custom hooks:** L√≥gica reutiliz√°vel

### **Roteamento ([App.jsx](mdc:frontend/src/App.jsx))**
```jsx
// Estrutura de rotas protegidas
<Route path="/admin" element={
  <ProtectedRoute>
    <AdminDashboard />
  </ProtectedRoute>
} />
```

### **Componentes Principais**
- **AdminDashboard:** Dashboard geral do sistema
- **EmpresaDashboard:** Dashboard espec√≠fico por empresa
- **BufferStatus:** Monitoramento do buffer em tempo real
- **LogsViewer:** Visualiza√ß√£o de logs e erros
- **ConversationView:** Hist√≥rico de conversas
- **Sidebar:** Navega√ß√£o lateral
- **Login:** Autentica√ß√£o de usu√°rios

## üé® Design System

### **Tema Preto e Branco**
- **Cores principais:** Preto (#000000) e Branco (#FFFFFF)
- **Cinzas:** Tons de cinza para elementos secund√°rios
- **Acentos:** Azul para links e a√ß√µes
- **Logo TinyTeams:** Identidade visual consistente

### **Layout Responsivo**
- **Mobile-first:** Design adaptativo
- **Breakpoints:** 768px, 1024px, 1200px
- **Sidebar:** Colaps√°vel em mobile
- **Grid system:** Flexbox e CSS Grid

### **Componentes UI**
```css
/* Estilos base */
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 20px;
}

.card {
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  padding: 20px;
}
```

## üîß Estrutura de Arquivos

### **Organiza√ß√£o de Componentes**
```
src/
‚îú‚îÄ‚îÄ components/           # Componentes React
‚îÇ   ‚îú‚îÄ‚îÄ AdminDashboard.jsx
‚îÇ   ‚îú‚îÄ‚îÄ EmpresaDashboard.jsx
‚îÇ   ‚îú‚îÄ‚îÄ BufferStatus.jsx
‚îÇ   ‚îú‚îÄ‚îÄ LogsViewer.jsx
‚îÇ   ‚îú‚îÄ‚îÄ ConversationView.jsx
‚îÇ   ‚îú‚îÄ‚îÄ Sidebar.jsx
‚îÇ   ‚îú‚îÄ‚îÄ Login.jsx
‚îÇ   ‚îú‚îÄ‚îÄ Usuarios.jsx
‚îÇ   ‚îî‚îÄ‚îÄ NovaEmpresa.jsx
‚îú‚îÄ‚îÄ services/            # Servi√ßos e APIs
‚îÇ   ‚îî‚îÄ‚îÄ api.js          # Cliente HTTP
‚îú‚îÄ‚îÄ assets/             # Recursos est√°ticos
‚îú‚îÄ‚îÄ App.jsx             # Componente principal
‚îî‚îÄ‚îÄ main.jsx           # Ponto de entrada
```

### **Servi√ßos de API ([api.js](mdc:frontend/src/services/api.js))**
- **Axios:** Cliente HTTP para backend
- **Interceptors:** Tratamento de tokens JWT
- **Error handling:** Tratamento de erros centralizado
- **Base URL:** Configura√ß√£o de ambiente

## üîê Autentica√ß√£o

### **Sistema de Login**
- **JWT Tokens:** Armazenamento em localStorage
- **Protected Routes:** Redirecionamento autom√°tico
- **Token refresh:** Renova√ß√£o autom√°tica
- **Logout:** Limpeza de dados

### **Prote√ß√£o de Rotas**
```jsx
// ProtectedRoute component
const ProtectedRoute = ({ children }) => {
  const token = localStorage.getItem('token');
  
  if (!token) {
    return <Navigate to="/login" replace />;
  }
  
  return children;
};
```

## üìä Dashboards

### **Admin Dashboard**
- **M√©tricas macro:** Total de empresas, clientes, reservas
- **Lista de empresas:** Status e m√©tricas b√°sicas
- **Navega√ß√£o:** Links para dashboards espec√≠ficos
- **Responsivo:** Adapta√ß√£o para mobile

### **Empresa Dashboard**
- **M√©tricas espec√≠ficas:** Atendimentos, reservas, clientes
- **Atividade recente:** √öltimas intera√ß√µes
- **Status da empresa:** Ativo/inativo
- **A√ß√µes r√°pidas:** Links para funcionalidades

### **Buffer Status**
- **Tempo real:** WebSocket ou polling
- **Buffers ativos:** Lista de conversas em processamento
- **Timers:** Contagem regressiva
- **A√ß√µes:** For√ßar processamento

## üìù Conven√ß√µes de C√≥digo

### **Componentes Funcionais**
```jsx
import React, { useState, useEffect } from 'react';

const ComponentName = ({ prop1, prop2 }) => {
  const [state, setState] = useState(initialValue);
  
  useEffect(() => {
    // Side effects
  }, [dependencies]);
  
  const handleClick = () => {
    // Event handlers
  };
  
  return (
    <div className="component">
      {/* JSX content */}
    </div>
  );
};

export default ComponentName;
```

### **Hooks Customizados**
```jsx
// hooks/useApi.js
const useApi = (endpoint) => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  
  useEffect(() => {
    // API call logic
  }, [endpoint]);
  
  return { data, loading, error };
};
```

### **Estiliza√ß√£o**
- **CSS Modules:** Para estilos espec√≠ficos
- **CSS-in-JS:** Para estilos din√¢micos
- **Tailwind CSS:** Para utilit√°rios (se configurado)
- **Vari√°veis CSS:** Para temas consistentes

## üöÄ Performance

### **Otimiza√ß√µes**
- **React.memo:** Para componentes pesados
- **useMemo/useCallback:** Para c√°lculos custosos
- **Lazy loading:** Para componentes grandes
- **Code splitting:** Para reduzir bundle size

### **Bundle Optimization**
- **Vite:** Build tool moderna
- **Tree shaking:** Remo√ß√£o de c√≥digo n√£o usado
- **Minifica√ß√£o:** Redu√ß√£o de tamanho
- **Gzip:** Compress√£o de assets

## üì± Responsividade

### **Mobile-First**
```css
/* Base styles (mobile) */
.container {
  padding: 10px;
}

/* Tablet */
@media (min-width: 768px) {
  .container {
    padding: 20px;
  }
}

/* Desktop */
@media (min-width: 1024px) {
  .container {
    padding: 30px;
  }
}
```

### **Sidebar Responsiva**
- **Desktop:** Sempre vis√≠vel
- **Tablet:** Colaps√°vel
- **Mobile:** Overlay com overlay

## üîÑ Estado Global

### **Context API**
```jsx
// Context for global state
const AppContext = createContext();

export const AppProvider = ({ children }) => {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(false);
  
  return (
    <AppContext.Provider value={{ user, setUser, loading, setLoading }}>
      {children}
    </AppContext.Provider>
  );
};
```

### **Local State**
- **useState:** Para estado local
- **useReducer:** Para estado complexo
- **useContext:** Para estado compartilhado

## üß™ Testes

### **Estrutura de Testes**
```jsx
// Component.test.jsx
import { render, screen } from '@testing-library/react';
import Component from './Component';

test('renders component', () => {
  render(<Component />);
  expect(screen.getByText('Text')).toBeInTheDocument();
});
```

### **Mocks**
- **API calls:** Mock de servi√ßos
- **LocalStorage:** Mock de storage
- **Router:** Mock de navega√ß√£o

## üîß Configura√ß√£o

### **Vite ([vite.config.js](mdc:frontend/vite.config.js))**
- **Build tool:** Vite para desenvolvimento r√°pido
- **Hot reload:** Recarregamento autom√°tico
- **Environment variables:** Configura√ß√£o de ambiente
- **Proxy:** Para desenvolvimento local

### **Package.json**
- **Dependencies:** React, React Router, Axios
- **Dev dependencies:** Vite, testing libraries
- **Scripts:** Build, dev, test, preview

## üìä Monitoramento

### **Error Boundaries**
```jsx
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }
  
  static getDerivedStateFromError(error) {
    return { hasError: true };
  }
  
  render() {
    if (this.state.hasError) {
      return <h1>Algo deu errado.</h1>;
    }
    
    return this.props.children;
  }
}
```

### **Analytics**
- **User interactions:** Tracking de cliques
- **Performance:** M√©tricas de carregamento
- **Errors:** Captura de erros
- **Usage:** M√©tricas de uso
description:
globs:
alwaysApply: false
---
