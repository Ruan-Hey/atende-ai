# ü§ñ ARQUITETURA DOS AGENTES - ATENDE AI

## üìã **VIS√ÉO GERAL**

Este documento define a arquitetura dos agentes inteligentes do sistema Atende AI, estabelecendo regras claras para desenvolvimento, manuten√ß√£o e evolu√ß√£o.

## üèóÔ∏è **ESTRUTURA FUNDAMENTAL**

### **1. Smart Agent (PLATAFORMA)**
- **Arquivo:** `agents/smart_agent.py`
- **Responsabilidade:** Orquestra√ß√£o da conversa e coordena√ß√£o de APIs
- **Escopo:** Funciona para QUALQUER empresa automaticamente
- **Caracter√≠sticas:** Din√¢mico, configur√°vel, escal√°vel

### **2. Rules Engine (REGRAS de cada API)**
- **Arquivo:** `apis/{api_name}/rules_engine.py`
- **Responsabilidade:** Defini√ß√£o de regras, fluxos e configura√ß√µes
- **Escopo:** Espec√≠fico para cada API (Trinks, Google, etc.)
- **Caracter√≠sticas:** Est√°tico, configurativo, sem l√≥gica de execu√ß√£o

### **3. Tools (EXECU√á√ÉO de a√ß√µes)**
- **Arquivo:** `apis/{api_name}/tools.py`
- **Responsabilidade:** Execu√ß√£o real de a√ß√µes e chamadas de API
- **Escopo:** Espec√≠fico para cada API
- **Caracter√≠sticas:** Execut√°vel, funcional, com l√≥gica de neg√≥cio

## üîÑ **FLUXO DE EXECU√á√ÉO**

```
Usu√°rio ‚Üí Smart Agent ‚Üí Rules Engine ‚Üí Tools ‚Üí API Externa
   ‚Üì           ‚Üì            ‚Üì          ‚Üì         ‚Üì
Mensagem ‚Üí Orquestra√ß√£o ‚Üí Regras ‚Üí Execu√ß√£o ‚Üí Resultado
```

### **Detalhamento do Fluxo:**

1. **Usu√°rio envia mensagem** para o sistema
2. **Smart Agent** recebe e analisa a inten√ß√£o
3. **Smart Agent** consulta **Rules Engine** da API ativa
4. **Smart Agent** chama **Tools** apropriadas
5. **Tools** executam a√ß√µes usando as regras
6. **Resultado** retorna para o usu√°rio

## üìÅ **ESTRUTURA DE ARQUIVOS**

```
agents/
‚îú‚îÄ‚îÄ smart_agent.py                    # Agente principal (PLATAFORMA)
‚îî‚îÄ‚îÄ base/
    ‚îú‚îÄ‚îÄ base_rules_engine.py          # Regras comuns a todas APIs
    ‚îî‚îÄ‚îÄ base_tools.py                 # Tools comuns a todas APIs

apis/
‚îú‚îÄ‚îÄ trinks/
‚îÇ   ‚îú‚îÄ‚îÄ trinks_rules_engine.py       # Regras espec√≠ficas Trinks
‚îÇ   ‚îî‚îÄ‚îÄ trinks_tools.py              # Tools espec√≠ficas Trinks
‚îú‚îÄ‚îÄ google_calendar/
‚îÇ   ‚îú‚îÄ‚îÄ google_calendar_rules_engine.py
‚îÇ   ‚îî‚îÄ‚îÄ google_calendar_tools.py
‚îî‚îÄ‚îÄ google_sheets/
    ‚îú‚îÄ‚îÄ google_sheets_rules_engine.py
    ‚îî‚îÄ‚îÄ google_sheets_tools.py

empresas/
‚îú‚îÄ‚îÄ ginestetica_config.json          # Configura√ß√£o da empresa
‚îú‚îÄ‚îÄ tinyteams_config.json            # Configura√ß√£o da empresa
‚îî‚îÄ‚îÄ panci_piena_config.json          # Configura√ß√£o da empresa
```

## üéØ **REGRAS FUNDAMENTAIS**

### **REGRA 1: Smart Agent √© PLATAFORMA**
- ‚úÖ **NUNCA** criar Smart Agent espec√≠fico por empresa
- ‚úÖ **SEMPRE** usar Smart Agent gen√©rico que se adapta
- ‚úÖ **NUNCA** hardcodar regras de empresa no Smart Agent
- ‚úÖ **SEMPRE** carregar configura√ß√µes dinamicamente

### **REGRA 2: Rules Engine √© APENAS regras**
- ‚úÖ **NUNCA** incluir l√≥gica de execu√ß√£o
- ‚úÖ **SEMPRE** retornar configura√ß√µes e regras
- ‚úÖ **NUNCA** fazer chamadas HTTP ou processar dados
- ‚úÖ **SEMPRE** ser determin√≠stico e previs√≠vel

### **REGRA 3: Tools s√£o APENAS execu√ß√£o**
- ‚úÖ **NUNCA** definir regras ou configura√ß√µes
- ‚úÖ **SEMPRE** usar regras do Rules Engine
- ‚úÖ **NUNCA** tomar decis√µes de neg√≥cio
- ‚úÖ **SEMPRE** executar a√ß√µes espec√≠ficas

### **REGRA 4: Empresas s√£o APENAS configura√ß√£o**
- ‚úÖ **NUNCA** criar c√≥digo espec√≠fico por empresa
- ‚úÖ **SEMPRE** usar configura√ß√µes JSON
- ‚úÖ **NUNCA** hardcodar dados de empresa
- ‚úÖ **SEMPRE** carregar dinamicamente

## üîß **IMPLEMENTA√á√ÉO DAS REGRAS**

### **Smart Agent (PLATAFORMA)**

```python
class SmartAgent:
    def __init__(self, empresa_config: Dict[str, Any]):
        self.empresa_config = empresa_config
        self.api_rules = self._load_api_rules()
        self.tools = self._load_api_tools()
    
    def _load_api_rules(self):
        # Carrega regras de TODAS as APIs ativas
        # NUNCA hardcodar regras espec√≠ficas
    
    def _load_api_tools(self):
        # Carrega tools de TODAS as APIs ativas
        # NUNCA hardcodar tools espec√≠ficas
```

### **Rules Engine (REGRAS)**

```python
class TrinksRulesEngine:
    def get_availability_rules(self) -> Dict[str, Any]:
        # Retorna APENAS regras e configura√ß√µes
        # NUNCA executa l√≥gica ou faz chamadas
        return {
            "endpoints": ["/agendamentos/servicos/{id}/{data}"],
            "campos_obrigatorios": ["data"],
            "duracao_slot_padrao": 30
        }
```

### **Tools (EXECU√á√ÉO)**

```python
@lc_tool("search_trinks_availability")
def search_trinks_availability(data: str, servico: str) -> str:
    # Pega regras do Rules Engine
    rules = trinks_rules_engine.get_availability_rules()
    
    # Executa a√ß√£o usando as regras
    endpoint = rules["endpoints"][0].format(id=servico, data=data)
    response = requests.get(f"{base_url}{endpoint}")
    
    # Retorna resultado
    return process_response(response)
```

## üö´ **ANTI-PADR√ïES (NUNCA FAZER)**

### **‚ùå Smart Agent espec√≠fico por empresa:**
```python
# NUNCA FAZER
class GinesteticaSmartAgent(SmartAgent):
    def __init__(self):
        # Regras hardcodadas da Ginest√©tica
        self.trinks_rules = {...}
```

### **‚ùå Rules Engine com l√≥gica:**
```python
# NUNCA FAZER
class TrinksRulesEngine:
    def validate_slots(self, slots):
        # L√≥gica de valida√ß√£o aqui
        for slot in slots:
            if not slot.available:
                return False
```

### **‚ùå Tools com regras:**
```python
# NUNCA FAZER
@lc_tool("search_availability")
def search_availability(data, servico):
    # Regras hardcodadas aqui
    endpoint = "/agendamentos/servicos/{id}/{data}"
    # L√≥gica de neg√≥cio aqui
```

### **‚ùå Configura√ß√£o hardcodada:**
```python
# NUNCA FAZER
class SmartAgent:
    def __init__(self):
        # Dados da empresa hardcodados
        self.empresa = "Ginest√©tica"
        self.api_key = "abc123"
```

## ‚úÖ **PADR√ïES CORRETOS (SEMPRE FAZER)**

### **‚úÖ Smart Agent gen√©rico:**
```python
# SEMPRE FAZER
class SmartAgent:
    def __init__(self, empresa_config: Dict[str, Any]):
        self.empresa_config = empresa_config
        self.api_rules = self._load_api_rules()
        self.tools = self._load_api_tools()
```

### **‚úÖ Rules Engine apenas regras:**
```python
# SEMPRE FAZER
class TrinksRulesEngine:
    def get_availability_rules(self) -> Dict[str, Any]:
        return {
            "endpoints": ["/agendamentos/servicos/{id}/{data}"],
            "campos_obrigatorios": ["data"]
        }
```

### **‚úÖ Tools apenas execu√ß√£o:**
```python
# SEMPRE FAZER
@lc_tool("search_availability")
def search_availability(data: str, servico: str) -> str:
    rules = trinks_rules_engine.get_availability_rules()
    endpoint = rules["endpoints"][0].format(id=servico, data=data)
    return execute_api_call(endpoint)
```

### **‚úÖ Configura√ß√£o din√¢mica:**
```python
# SEMPRE FAZER
class SmartAgent:
    def __init__(self, empresa_config: Dict[str, Any]):
        self.empresa_config = empresa_config
        self.api_rules = self._load_api_rules()
```

## üîÑ **PROCESSO DE EVOLU√á√ÉO**

### **1. Identificar necessidade de mudan√ßa**
- Qual parte do sistema precisa evoluir?
- √â regra, execu√ß√£o ou orquestra√ß√£o?

### **2. Localizar arquivo correto**
- **Regras** ‚Üí Rules Engine da API espec√≠fica
- **Execu√ß√£o** ‚Üí Tools da API espec√≠fica
- **Orquestra√ß√£o** ‚Üí Smart Agent (cuidado!)

### **3. Implementar mudan√ßa**
- **NUNCA** quebrar interface existente
- **SEMPRE** manter compatibilidade
- **SEMPRE** testar antes de commitar

### **4. Validar arquitetura**
- A mudan√ßa segue as regras fundamentais?
- N√£o criou depend√™ncias incorretas?
- Manteve separa√ß√£o de responsabilidades?

## üìä **EXEMPLOS DE EVOLU√á√ÉO**

### **Cen√°rio 1: Nova regra para Trinks**
- **Arquivo:** `apis/trinks/trinks_rules_engine.py`
- **A√ß√£o:** Adicionar nova regra no dicion√°rio de regras
- **Valida√ß√£o:** A regra √© apenas configura√ß√£o?

### **Cen√°rio 2: Nova funcionalidade para Google Calendar**
- **Arquivo:** `apis/google_calendar/google_calendar_tools.py`
- **A√ß√£o:** Adicionar nova @tool
- **Valida√ß√£o:** A tool usa regras do Rules Engine?

### **Cen√°rio 3: Melhoria na orquestra√ß√£o**
- **Arquivo:** `agents/smart_agent.py`
- **A√ß√£o:** Melhorar l√≥gica de detec√ß√£o de inten√ß√£o
- **Valida√ß√£o:** N√£o criou depend√™ncias espec√≠ficas de empresa?

## üß™ **TESTES DE VALIDA√á√ÉO**

### **Teste 1: Mudan√ßa de empresa**
```python
# Deve funcionar sem alterar c√≥digo
smart_agent_ginestetica = SmartAgent(ginestetica_config)
smart_agent_tinyteams = SmartAgent(tinyteams_config)
```

### **Teste 2: Mudan√ßa de API**
```python
# Deve funcionar sem alterar Smart Agent
trinks_rules = TrinksRulesEngine()
google_rules = GoogleCalendarRulesEngine()
```

### **Teste 3: Mudan√ßa de configura√ß√£o**
```python
# Deve funcionar sem alterar c√≥digo
empresa_config["trinks_enabled"] = False
empresa_config["google_calendar_enabled"] = True
```

## üìù **CHECKLIST DE VALIDA√á√ÉO**

Antes de commitar qualquer mudan√ßa, verificar:

- [ ] **Smart Agent** continua funcionando para qualquer empresa?
- [ ] **Rules Engine** n√£o tem l√≥gica de execu√ß√£o?
- [ ] **Tools** n√£o t√™m regras hardcodadas?
- [ ] **Configura√ß√µes** s√£o carregadas dinamicamente?
- [ ] **Interface** existente n√£o foi quebrada?
- [ ] **Testes** passam para diferentes empresas?
- [ ] **Arquitetura** foi mantida?

## üéØ **RESUMO FINAL**

### **Smart Agent = PLATAFORMA**
- Orquestra conversas
- Carrega configura√ß√µes dinamicamente
- Coordena m√∫ltiplas APIs

### **Rules Engine = REGRAS**
- Define como cada API funciona
- Configura fluxos e valida√ß√µes
- NUNCA executa l√≥gica

### **Tools = EXECU√á√ÉO**
- Executa a√ß√µes reais
- Usa regras do Rules Engine
- NUNCA define regras

### **Empresas = CONFIGURA√á√ÉO**
- JSON com configura√ß√µes
- NUNCA c√≥digo espec√≠fico
- Carregamento din√¢mico

---

**IMPORTANTE:** Este documento deve ser consultado ANTES de qualquer mudan√ßa na arquitetura dos agentes. Seguir estas regras garante que o sistema continue escal√°vel e manuten√≠vel.
description:
globs:
alwaysApply: false
---
