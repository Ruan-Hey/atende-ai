# DevOps e Deploy Guidelines

## üê≥ Docker e Containeriza√ß√£o

### **Docker Compose ([docker-compose.yml](mdc:docker-compose.yml))**
```yaml
version: '3.8'
services:
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: atendeai
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - atendeai-network

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - atendeai-network

  backend:
    build: ./backend
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/atendeai
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=your-secret-key-here-change-in-production
    depends_on:
      - postgres
      - redis
    networks:
      - atendeai-network
    restart: unless-stopped

  frontend:
    build: ./frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - atendeai-network
    restart: unless-stopped
```

### **Backend Dockerfile ([backend/Dockerfile](mdc:backend/Dockerfile))**
- **Multi-stage build:** Para otimiza√ß√£o de tamanho
- **Python 3.11:** Vers√£o est√°vel
- **Depend√™ncias:** Instala√ß√£o via requirements.txt
- **Health checks:** Verifica√ß√£o de sa√∫de do container

### **Frontend Dockerfile ([frontend/Dockerfile](mdc:frontend/Dockerfile))**
- **Nginx:** Servidor web para produ√ß√£o
- **Build est√°tico:** Otimiza√ß√£o para produ√ß√£o
- **Configura√ß√£o:** Nginx config para SPA
- **SSL:** Suporte a HTTPS

## üöÄ Deploy em Produ√ß√£o

### **Docker Compose Production ([docker-compose.prod.yml](mdc:docker-compose.prod.yml))**
- **Volumes persistentes:** Para dados cr√≠ticos
- **Networks isoladas:** Para seguran√ßa
- **Environment variables:** Configura√ß√µes de produ√ß√£o
- **Health checks:** Monitoramento de sa√∫de

### **Render Deployment ([render.yaml](mdc:render.yaml))**
```yaml
services:
  - type: web
    name: atendeai-backend
    env: python
    buildCommand: pip install -r requirements.txt
    startCommand: uvicorn main:app --host 0.0.0.0 --port $PORT
    envVars:
      - key: DATABASE_URL
        value: postgresql://...
      - key: REDIS_URL
        value: redis://...
```

### **SSL Setup ([setup-ssl.sh](mdc:setup-ssl.sh))**
- **Certbot:** Certificados Let's Encrypt
- **Auto-renewal:** Renova√ß√£o autom√°tica
- **Nginx config:** Configura√ß√£o SSL
- **Security headers:** Headers de seguran√ßa

## üîß Configura√ß√£o de Ambiente

### **Vari√°veis de Ambiente**
```bash
# Backend (.env)
DATABASE_URL=postgresql://user:pass@host:port/db
REDIS_URL=redis://host:port
SECRET_KEY=your-secret-key-here
OPENAI_API_KEY=your-openai-key
TWILIO_ACCOUNT_SID=your-twilio-sid
TWILIO_AUTH_TOKEN=your-twilio-token

# Frontend
VITE_API_URL=http://localhost:8000
VITE_APP_NAME=Atende Ai
```

### **Configura√ß√£o por Empresa**
- **Slug √∫nico:** Identifica√ß√£o da empresa
- **Configura√ß√µes JSON:** Integra√ß√µes e settings
- **Prompts personalizados:** IA espec√≠fica por neg√≥cio
- **Webhooks:** URLs espec√≠ficas por empresa

## üìä Monitoramento e Logs

### **Sistema de Logs**
- **Structured logging:** JSON format
- **Log levels:** INFO, WARNING, ERROR
- **Log aggregation:** Centraliza√ß√£o de logs
- **Log retention:** Pol√≠tica de reten√ß√£o

### **Health Checks**
```python
@app.get("/health")
def health() -> HealthCheck:
    return HealthCheck(
        status="healthy",
        timestamp=datetime.now(),
        version="1.0.0"
    )
```

### **M√©tricas**
- **Application metrics:** Tempo de resposta, throughput
- **Business metrics:** Atendimentos, reservas, clientes
- **Infrastructure metrics:** CPU, memory, disk
- **Error rates:** Taxa de erros e falhas

## üîê Seguran√ßa

### **SSL/TLS**
- **Let's Encrypt:** Certificados gratuitos
- **Auto-renewal:** Renova√ß√£o autom√°tica
- **Security headers:** HSTS, CSP, etc.
- **Redirect HTTP to HTTPS:** For√ßar HTTPS

### **Network Security**
- **Firewall rules:** Regras de firewall
- **VPN access:** Acesso seguro
- **Port restrictions:** Limita√ß√£o de portas
- **DDoS protection:** Prote√ß√£o contra ataques

### **Application Security**
- **JWT tokens:** Autentica√ß√£o stateless
- **Password hashing:** bcrypt para senhas
- **Input validation:** Valida√ß√£o de entradas
- **SQL injection protection:** ORM com SQLAlchemy

## üóÑÔ∏è Banco de Dados

### **PostgreSQL**
- **Connection pooling:** PgBouncer para performance
- **Backup strategy:** Backups autom√°ticos
- **Replication:** Read replicas se necess√°rio
- **Monitoring:** pg_stat_statements para queries

### **Redis**
- **Persistence:** RDB e AOF para durabilidade
- **Memory management:** Configura√ß√£o de mem√≥ria
- **Backup:** Snapshots autom√°ticos
- **Monitoring:** Redis INFO para m√©tricas

## üîÑ CI/CD Pipeline

### **GitHub Actions**
```yaml
name: Deploy
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Deploy to Render
        run: |
          # Deploy steps
```

### **Automated Testing**
- **Unit tests:** Testes de unidades
- **Integration tests:** Testes de integra√ß√£o
- **E2E tests:** Testes end-to-end
- **Security scans:** Verifica√ß√£o de vulnerabilidades

## üìà Escalabilidade

### **Horizontal Scaling**
- **Load balancer:** Distribui√ß√£o de carga
- **Multiple instances:** M√∫ltiplas inst√¢ncias
- **Database sharding:** Particionamento de dados
- **CDN:** Distribui√ß√£o de conte√∫do est√°tico

### **Vertical Scaling**
- **Resource monitoring:** Monitoramento de recursos
- **Auto-scaling:** Escalabilidade autom√°tica
- **Performance tuning:** Otimiza√ß√£o de performance
- **Caching strategy:** Estrat√©gia de cache

## üö® Disaster Recovery

### **Backup Strategy**
- **Database backups:** Backups di√°rios
- **File backups:** Backups de arquivos
- **Configuration backups:** Backups de configura√ß√£o
- **Recovery testing:** Testes de recupera√ß√£o

### **High Availability**
- **Redundant servers:** Servidores redundantes
- **Failover strategy:** Estrat√©gia de failover
- **Data replication:** Replica√ß√£o de dados
- **Monitoring alerts:** Alertas de monitoramento

## üìã Deploy Checklist

### **Pre-deploy**
- [ ] **Environment variables:** Configuradas corretamente
- [ ] **Database migrations:** Executadas
- [ ] **SSL certificates:** V√°lidos e renovados
- [ ] **Backup:** Backup recente realizado
- [ ] **Testing:** Testes passando

### **Deploy**
- [ ] **Docker images:** Builds atualizados
- [ ] **Health checks:** Verificando sa√∫de
- [ ] **Logs monitoring:** Monitorando logs
- [ ] **Performance:** Verificando performance
- [ ] **Rollback plan:** Plano de rollback pronto

### **Post-deploy**
- [ ] **Functionality:** Funcionalidades testadas
- [ ] **Performance:** M√©tricas verificadas
- [ ] **Error monitoring:** Monitoramento de erros
- [ ] **User feedback:** Feedback de usu√°rios
- [ ] **Documentation:** Documenta√ß√£o atualizada

## üîß Troubleshooting

### **Common Issues**
- **Database connections:** Verificar conex√µes
- **Redis connectivity:** Verificar Redis
- **SSL certificates:** Verificar certificados
- **Memory leaks:** Monitorar uso de mem√≥ria
- **Slow queries:** Otimizar queries

### **Debug Commands**
```bash
# Verificar containers
docker ps
docker logs <container_name>

# Verificar banco de dados
docker exec -it postgres psql -U postgres -d atendeai

# Verificar Redis
docker exec -it redis redis-cli

# Verificar logs
docker-compose logs -f backend
```

## üìö Documenta√ß√£o

### **Deploy Guide ([DEPLOY.md](mdc:DEPLOY.md))**
- **Setup instructions:** Instru√ß√µes de configura√ß√£o
- **Environment setup:** Configura√ß√£o de ambiente
- **Deploy steps:** Passos de deploy
- **Troubleshooting:** Solu√ß√£o de problemas

### **API Documentation**
- **Swagger UI:** Documenta√ß√£o autom√°tica
- **OpenAPI spec:** Especifica√ß√£o da API
- **Examples:** Exemplos de uso
- **Error codes:** C√≥digos de erro
description:
globs:
alwaysApply: false
---
