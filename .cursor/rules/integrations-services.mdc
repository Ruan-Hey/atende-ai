# Integra√ß√µes e Servi√ßos Externos

## ü§ñ OpenAI Integration ([openai_service.py](mdc:backend/integrations/openai_service.py))

### **Funcionalidades**
- **GPT-4o:** Processamento de linguagem natural
- **Whisper:** Transcri√ß√£o de √°udio para texto
- **Prompts personalizados:** Por empresa e contexto
- **Context management:** Manuten√ß√£o de contexto de conversa

### **Configura√ß√£o**
```python
# Configura√ß√£o OpenAI
OPENAI_API_KEY = "your-openai-api-key"
OPENAI_MODEL = "gpt-4o"  # ou "gpt-4o-mini"
WHISPER_MODEL = "whisper-1"
```

### **Uso T√≠pico**
```python
# Processamento de texto
response = await openai_service.process_message(
    message="Ol√°, quero fazer uma reserva",
    empresa_slug="umas-e-ostras",
    context=conversation_history
)

# Transcri√ß√£o de √°udio
transcription = await openai_service.transcribe_audio(
    audio_url="https://example.com/audio.wav"
)
```

### **Prompts Personalizados**
- **Restaurante:** Foco em reservas e card√°pio
- **Pizzaria:** Foco em pedidos e delivery
- **Contexto:** Hist√≥rico de conversa mantido
- **Tone:** Tom apropriado para cada neg√≥cio

## üìû Twilio WhatsApp Integration ([twilio_service.py](mdc:backend/integrations/twilio_service.py))

### **Funcionalidades**
- **WhatsApp Business API:** Envio e recebimento de mensagens
- **Webhooks:** Recebimento autom√°tico de mensagens
- **Templates:** Mensagens estruturadas
- **Media handling:** Imagens, √°udio, documentos

### **Configura√ß√£o**
```python
# Configura√ß√£o Twilio
TWILIO_ACCOUNT_SID = "your-account-sid"
TWILIO_AUTH_TOKEN = "your-auth-token"
TWILIO_PHONE_NUMBER = "whatsapp:+1234567890"
```

### **Webhook Handler**
```python
@app.post("/webhook/{empresa_slug}")
async def webhook_handler(empresa_slug: str, request: Request):
    # Recebimento de mensagens do WhatsApp
    data = await request.form()
    message = data.get("Body")
    from_number = data.get("From")
    
    # Processamento da mensagem
    await process_incoming_message(empresa_slug, message, from_number)
```

### **Envio de Mensagens**
```python
# Envio de texto
await twilio_service.send_message(
    to="whatsapp:+1234567890",
    body="Sua reserva foi confirmada!",
    empresa_slug="umas-e-ostras"
)

# Envio de m√≠dia
await twilio_service.send_media(
    to="whatsapp:+1234567890",
    media_url="https://example.com/image.jpg",
    caption="Confira nosso card√°pio"
)
```

## üìä Google Sheets Integration ([google_sheets_service.py](mdc:backend/integrations/google_sheets_service.py))

### **Funcionalidades**
- **Gest√£o de reservas:** Adicionar, atualizar, cancelar
- **Listagem de dados:** Consulta de reservas existentes
- **Sincroniza√ß√£o:** Dados em tempo real
- **Formata√ß√£o:** Layout personalizado

### **Configura√ß√£o**
```python
# Configura√ß√£o Google Sheets
GOOGLE_SHEETS_CREDENTIALS = {
    "type": "service_account",
    "project_id": "your-project-id",
    "private_key_id": "your-private-key-id",
    "private_key": "-----BEGIN PRIVATE KEY-----\n...",
    "client_email": "your-service-account@project.iam.gserviceaccount.com"
}
```

### **Opera√ß√µes Principais**
```python
# Adicionar reserva
await sheets_service.add_reservation(
    sheet_id="your-sheet-id",
    data={
        "data": "2024-01-15",
        "hora": "19:00",
        "nome": "Jo√£o Silva",
        "telefone": "+5511999999999",
        "pessoas": 4,
        "status": "confirmada"
    }
)

# Listar reservas
reservations = await sheets_service.list_reservations(
    sheet_id="your-sheet-id",
    date_filter="2024-01-15"
)
```

### **Estrutura da Planilha**
- **Colunas:** Data, Hora, Nome, Telefone, Pessoas, Status
- **Formata√ß√£o:** Cores por status
- **Filtros:** Por data e status
- **Valida√ß√£o:** Dados obrigat√≥rios

## üìÖ Google Calendar Integration ([google_calendar_service.py](mdc:backend/integrations/google_calendar_service.py))

### **Funcionalidades**
- **Agendamento de reuni√µes:** Cria√ß√£o autom√°tica de eventos
- **Slots dispon√≠veis:** Consulta de hor√°rios livres
- **Sincroniza√ß√£o:** Com Google Sheets
- **Notifica√ß√µes:** Lembretes autom√°ticos

### **Configura√ß√£o**
```python
# Configura√ß√£o Google Calendar
GOOGLE_CALENDAR_ID = "primary"  # ou ID espec√≠fico
GOOGLE_CALENDAR_CREDENTIALS = {
    # Mesmas credenciais do Google Sheets
}
```

### **Opera√ß√µes**
```python
# Criar evento
event = await calendar_service.create_event(
    summary="Reserva - Jo√£o Silva",
    description="4 pessoas, telefone: +5511999999999",
    start_time="2024-01-15T19:00:00",
    end_time="2024-01-15T21:00:00",
    attendees=["joao@email.com"]
)

# Consultar slots dispon√≠veis
available_slots = await calendar_service.get_available_slots(
    date="2024-01-15",
    business_hours="09:00-22:00"
)
```

## üí¨ Chatwoot Integration ([chatwoot_service.py](mdc:backend/integrations/chatwoot_service.py))

### **Funcionalidades**
- **CRM completo:** Gest√£o de contatos e conversas
- **Registro autom√°tico:** Conversas do WhatsApp
- **Hist√≥rico:** Manuten√ß√£o de hist√≥rico completo
- **Tags e filtros:** Organiza√ß√£o de conversas

### **Configura√ß√£o**
```python
# Configura√ß√£o Chatwoot
CHATWOOT_API_URL = "https://app.chatwoot.com/api/v1"
CHATWOOT_ACCESS_TOKEN = "your-access-token"
CHATWOOT_ACCOUNT_ID = "your-account-id"
CHATWOOT_INBOX_ID = "your-inbox-id"
```

### **Opera√ß√µes Principais**
```python
# Criar conversa
conversation = await chatwoot_service.create_conversation(
    contact_identifier="+5511999999999",
    message="Ol√°, quero fazer uma reserva",
    empresa_slug="umas-e-ostras"
)

# Adicionar mensagem
await chatwoot_service.add_message(
    conversation_id=conversation_id,
    message="Sua reserva foi confirmada!",
    message_type="outgoing"
)

# Listar conversas
conversations = await chatwoot_service.list_conversations(
    status="open",
    empresa_slug="umas-e-ostras"
)
```

### **Estrutura de Dados**
- **Contatos:** Informa√ß√µes do cliente
- **Conversas:** Hist√≥rico de mensagens
- **Tags:** Categoriza√ß√£o (reserva, pedido, d√∫vida)
- **Agentes:** Atribui√ß√£o de conversas

## üîÑ Sistema de Buffer ([message_buffer.py](mdc:backend/services/message_buffer.py))

### **Funcionalidades**
- **Agrupamento:** Mensagens em buffer de 10 segundos
- **Processamento inteligente:** Texto e √°udio separadamente
- **Otimiza√ß√£o:** Reduz spam de respostas
- **Contexto:** Manuten√ß√£o de contexto de conversa

### **Fluxo de Processamento**
```python
# 1. Recebimento de mensagem
await buffer_service.add_message(
    empresa_slug="umas-e-ostras",
    cliente_id="+5511999999999",
    message="Ol√°",
    message_type="text"
)

# 2. Timer de 10 segundos
# 3. Processamento em lote
# 4. Resposta √∫nica
```

### **Configura√ß√£o**
```python
# Configura√ß√£o do Buffer
BUFFER_TIMEOUT = 10  # segundos
BUFFER_MAX_SIZE = 5  # mensagens
PROCESSING_DELAY = 2  # segundos
```

## üîß Configura√ß√£o por Empresa

### **Estrutura de Configura√ß√£o**
```json
{
  "nome": "Umas e Ostras",
  "slug": "umas-e-ostras",
  "whatsapp_number": "+5511999999999",
  "google_sheets_id": "1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms",
  "chatwoot_token": "your-chatwoot-token",
  "openai_key": "your-openai-key",
  "twilio_sid": "your-twilio-sid",
  "twilio_token": "your-twilio-token",
  "twilio_number": "+5511888888888",
  "horario_funcionamento": "11:00-23:00",
  "filtros_chatwoot": ["reserva", "pedido"],
  "usar_buffer": true,
  "mensagem_quebrada": false
}
```

### **Prompts Personalizados**
```txt
# Prompt para restaurante (umas-e-ostras)
Voc√™ √© o atendente virtual do restaurante Umas e Ostras. 
Seu papel √© ajudar clientes com:
- Reservas de mesa
- Informa√ß√µes sobre o card√°pio
- Hor√°rios de funcionamento
- Localiza√ß√£o e estacionamento

Hor√°rio de funcionamento: 11:00 √†s 23:00
Endere√ßo: Rua das Flores, 123 - Centro

Sempre seja cordial e profissional.
```

## üö® Tratamento de Erros

### **Estrat√©gias de Retry**
```python
# Retry autom√°tico para APIs externas
async def api_call_with_retry(func, max_retries=3):
    for attempt in range(max_retries):
        try:
            return await func()
        except Exception as e:
            if attempt == max_retries - 1:
                raise e
            await asyncio.sleep(2 ** attempt)  # Exponential backoff
```

### **Logging de Erros**
```python
# Log estruturado para integra√ß√µes
logger.error(f"Erro na integra√ß√£o {service}: {error}", extra={
    "empresa_slug": empresa_slug,
    "cliente_id": cliente_id,
    "service": service_name,
    "error_code": error.code if hasattr(error, 'code') else None
})
```

### **Fallbacks**
- **OpenAI:** Fallback para respostas padr√£o
- **Twilio:** Retry com delay
- **Google Services:** Cache local tempor√°rio
- **Chatwoot:** Log local se indispon√≠vel

## üìä M√©tricas e Monitoramento

### **M√©tricas por Integra√ß√£o**
- **OpenAI:** Tokens usados, tempo de resposta
- **Twilio:** Mensagens enviadas/recebidas, taxa de entrega
- **Google Sheets:** Opera√ß√µes realizadas, erros
- **Chatwoot:** Conversas criadas, mensagens processadas

### **Alertas**
- **API limits:** Limites de uso pr√≥ximos
- **Error rates:** Taxa de erro alta
- **Response times:** Tempo de resposta lento
- **Service availability:** Servi√ßos indispon√≠veis

## üîê Seguran√ßa

### **API Keys**
- **Environment variables:** Nunca hardcoded
- **Rotation:** Rota√ß√£o regular de chaves
- **Access control:** Permiss√µes m√≠nimas necess√°rias
- **Monitoring:** Uso an√¥malo detectado

### **Data Privacy**
- **PII handling:** Dados pessoais protegidos
- **Encryption:** Dados em tr√¢nsito e repouso
- **Retention:** Pol√≠tica de reten√ß√£o de dados
- **GDPR compliance:** Conformidade com regulamenta√ß√µes
description:
globs:
alwaysApply: false
---
