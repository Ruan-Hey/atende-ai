# Backend Development Guidelines

## üêç FastAPI Development

### **Estrutura de Rotas**
- **Admin routes:** `/api/admin/*` - Requer autentica√ß√£o de superusu√°rio
- **Empresa routes:** `/api/admin/empresa/{slug}/*` - Requer usu√°rio da empresa
- **Webhooks:** `/webhook/{empresa_slug}` - Recebimento de mensagens
- **Health check:** `/health` - Status do sistema

### **Autentica√ß√£o JWT**
```python
# Usar depend√™ncias para prote√ß√£o de rotas
async def get_current_user(token: str = Depends(OAuth2PasswordBearer(tokenUrl="api/login"))):
    # Valida√ß√£o de token JWT
    pass

async def get_current_superuser(current_user: Usuario = Depends(get_current_user)):
    # Verifica√ß√£o de superusu√°rio
    pass
```

### **Modelos SQLAlchemy ([models.py](mdc:backend/models.py))**
- **Empresa:** Configura√ß√µes por empresa com integra√ß√µes
- **Mensagem:** Hist√≥rico de conversas por cliente
- **Usuario:** Sistema de usu√°rios com roles
- **Log:** Sistema de logs estruturado

### **Valida√ß√£o com Pydantic**
- **WebhookData:** Dados recebidos do Twilio
- **MessageResponse:** Resposta de mensagem processada
- **AdminMetrics:** M√©tricas para painel admin
- **EmpresaMetrics:** M√©tricas espec√≠ficas de empresa

## üîÑ Sistema de Buffer

### **Message Buffer ([message_buffer.py](mdc:backend/services/message_buffer.py))**
- **Agrupamento:** 10 segundos de buffer para mensagens
- **Processamento:** Texto e √°udio separadamente
- **Otimiza√ß√£o:** Reduz spam de respostas

### **Fluxo de Processamento**
1. **Recebimento:** Webhook do Twilio
2. **Buffer:** Agrupamento de mensagens
3. **OpenAI:** Processamento com GPT-4o
4. **Integra√ß√µes:** Google Sheets, Chatwoot
5. **Resposta:** Envio via Twilio

## üîå Integra√ß√µes Externas

### **OpenAI Service ([openai_service.py](mdc:backend/integrations/openai_service.py))**
- **GPT-4o:** Processamento de texto
- **Whisper:** Transcri√ß√£o de √°udio
- **Prompts personalizados:** Por empresa

### **Twilio Service ([twilio_service.py](mdc:backend/integrations/twilio_service.py))**
- **WhatsApp Business API:** Envio/recebimento
- **Webhooks:** Recebimento de mensagens
- **Templates:** Mensagens estruturadas

### **Google Services**
- **Google Sheets ([google_sheets_service.py](mdc:backend/integrations/google_sheets_service.py)):** Gest√£o de reservas
- **Google Calendar ([google_calendar_service.py](mdc:backend/integrations/google_calendar_service.py)):** Agendamento

### **Chatwoot Service ([chatwoot_service.py](mdc:backend/integrations/chatwoot_service.py))**
- **CRM:** Gest√£o de contatos
- **Conversas:** Hist√≥rico estruturado
- **Integra√ß√£o:** Registro autom√°tico

## üóÑÔ∏è Banco de Dados

### **PostgreSQL com SQLAlchemy**
- **Engine:** Configurado em [main.py](mdc:backend/main.py)
- **Sessions:** SessionLocal para opera√ß√µes
- **Migrations:** Alembic para controle de vers√£o

### **Redis Cache**
- **Contexto:** Manuten√ß√£o de estado de conversa
- **Buffer:** Dados tempor√°rios de processamento
- **Sess√µes:** Tokens e dados tempor√°rios

## üìù Conven√ß√µes de C√≥digo

### **Estrutura de Fun√ß√µes**
```python
@app.post("/api/endpoint")
async def endpoint_function(
    data: ModelType,
    current_user: Usuario = Depends(get_current_user)
) -> ResponseType:
    """Docstring explicando a fun√ß√£o"""
    try:
        # L√≥gica principal
        return response
    except Exception as e:
        logger.error(f"Erro: {e}")
        raise HTTPException(status_code=500, detail="Erro interno")
```

### **Logging**
```python
import logging
logger = logging.getLogger(__name__)

# Logs estruturados
logger.info(f"Processando mensagem para empresa {empresa_slug}")
logger.error(f"Erro na integra√ß√£o: {error}")
```

### **Tratamento de Erros**
- **HTTPException:** Para erros de API
- **Logging:** Para debug e monitoramento
- **Try/catch:** Para opera√ß√µes cr√≠ticas

## üîê Seguran√ßa

### **Autentica√ß√£o**
- **JWT Tokens:** Stateless authentication
- **Password Hashing:** bcrypt para senhas
- **Role-based Access:** Superusu√°rio vs usu√°rio empresa

### **Valida√ß√£o de Dados**
- **Pydantic:** Valida√ß√£o autom√°tica
- **SQLAlchemy:** Valida√ß√£o de banco
- **Sanitiza√ß√£o:** Limpeza de inputs

## üöÄ Performance

### **Processamento Ass√≠ncrono**
- **async/await:** Para opera√ß√µes I/O
- **Background tasks:** Para processamento pesado
- **Connection pooling:** Para banco de dados

### **Cache Strategy**
- **Redis:** Contexto de conversa
- **In-memory:** Dados tempor√°rios
- **TTL:** Expira√ß√£o autom√°tica

## üìä Monitoramento

### **Logs Estruturados**
- **N√≠veis:** INFO, WARNING, ERROR
- **Empresa:** Filtros por empresa
- **Timestamps:** Precis√£o temporal
- **Contexto:** Metadados relevantes

### **M√©tricas**
- **Health checks:** Status do sistema
- **Performance:** Tempo de resposta
- **Erros:** Taxa de falhas
- **Uso:** M√©tricas de neg√≥cio

## üß™ Testes

### **Estrutura de Testes**
```python
# test_main.py
def test_endpoint():
    response = client.post("/api/endpoint", json=data)
    assert response.status_code == 200
```

### **Mocks**
- **Integra√ß√µes externas:** OpenAI, Twilio
- **Banco de dados:** Test database
- **Cache:** Redis mock

## üîß Configura√ß√£o

### **Vari√°veis de Ambiente**
- **DATABASE_URL:** PostgreSQL connection
- **REDIS_URL:** Redis connection
- **SECRET_KEY:** JWT signing key
- **API Keys:** OpenAI, Twilio, etc.

### **Configura√ß√£o por Empresa**
- **Slug √∫nico:** Identifica√ß√£o da empresa
- **Configura√ß√µes:** JSON com integra√ß√µes
- **Prompts:** Personalizados por neg√≥cio
description:
globs:
alwaysApply: false
---
